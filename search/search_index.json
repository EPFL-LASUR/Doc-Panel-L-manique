{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil: Panel L\u00e9manique","text":"<p>Initi\u00e9 par la facult\u00e9 ENAC de l'EPFL, le Panel L\u00e9manique est une \u00e9tude lanc\u00e9e en 2021 pour une dur\u00e9e de 5 ans. Il a pour but de mesurer l\u2019\u00e9volution des comportements, des usages et des opinions sur des modes de vie \u00e0 la mani\u00e8re d\u2019un observatoire. Il aborde entre autres les th\u00e9matiques de la mobilit\u00e9 (quotidienne et \u00e0 fins r\u00e9cr\u00e9atives), du logement, du t\u00e9l\u00e9travail et de la consommation \u00e9nerg\u00e9tique.</p> <p>Le Panel L\u00e9manique couvre l\u2019enti\u00e8ret\u00e9 du territoire des cantons de Vaud et de Gen\u00e8ve. Il s\u2019\u00e9tend \u00e9galement dans le p\u00e9rim\u00e8tre du Grand Gen\u00e8ve, couvrant ainsi une partie des d\u00e9partements fran\u00e7ais de l\u2019Ain et de Haute-Savoie. Enfin, il couvre \u00e9galement une partie du Chablais valaisan et les r\u00e9gions de la Broye et de Gruy\u00e8re dans le canton de Fribourg.</p> <p>Le Panel L\u00e9manique est compos\u00e9 de plusieurs vagues. Au total, cinq vagues comparatives vont avoir lieu entre 2022 et 2026 (trois sur la mobilit\u00e9 et deux sur les habitudes de consommation et le logement). De plus, des vagues uniques sont men\u00e9es, autant sur l'ensemble du p\u00e9rim\u00e8tre (vague PDCn, vague Rythme et Ins\u00e9curit\u00e9) que sur des parties du p\u00e9rim\u00e8tre (vagues loisirs estivaux et hivernaux).</p> <p>Les donn\u00e9es de ces vagues ont \u00e9t\u00e9 r\u00e9colt\u00e9es par FORS, le centre de comp\u00e9tences suisse en sciences sociales, puis trait\u00e9es par le LaSUR. Elles sont aujourd'hui mises \u00e0 disposition pour la recherche ainsi que les partenaires.</p> <p>Ce site a pour vocation de documenter l'acc\u00e8s \u00e0 ces donn\u00e9es, stock\u00e9es sur le logiciel OPAL, ainsi que les fonctions mises \u00e0 disposition par le LaSUR pour faciliter la compr\u00e9hension des donn\u00e9es, ainsi que leur analyse.</p> <p>Partenaires:</p> <p></p>"},{"location":"MethodesR/","title":"R","text":""},{"location":"MethodesR/#installation","title":"Installation","text":"<p>R est un language informatique utilis\u00e9 majoritairement pour faire de l'analyse de donn\u00e9es et des statistiques. Il est particuli\u00e8rement adapt\u00e9 pour analyser les donn\u00e9es du Panel L\u00e9manique. Pour installer la derni\u00e8re version, voir le site du CRAN.</p> <p>Il existe une multitude de documentation sur R. Pour la trouver, vous pouvez vous rendre sur le site du R Project ou lire cette documentation.</p> <p>R peut \u00eatre tourn\u00e9 sur une multitude de logiciels. Il est conseill\u00e9 d'utiliser RStudio, que vous pouvez t\u00e9l\u00e9charger sur Posit. Vous y trouverez aussi un lien pour aller t\u00e9l\u00e9charger la derni\u00e8re version de R. Il est \u00e9galement possible de tourner R sur Visual Studio Code (Download). N'oubliez pas de t\u00e9l\u00e9charger l'extension R ! Et si vous voulez faire tourner R sur un autre logiciel... well, dans ce cas, je pense que vous n'avez plus besoin de documentation de ma part.</p>"},{"location":"MethodesR/#methodes-r","title":"M\u00e9thodes R","text":"<p>Dans ce paragraphe, quelques m\u00e9thodes d\u2019analyse en R vont \u00eatre pr\u00e9sent\u00e9es. Il s\u2019agit bien s\u00fbr d\u2019une liste non-exhaustive, et il existe toute une documentation sur d\u2019autres m\u00e9thodes de R (Documentation R). Les outils pr\u00e9sent\u00e9s dans ce chapitre sont n\u00e9anmoins des classiques pour l\u2019analyse de donn\u00e9es tel que celles du Panel L\u00e9manique.</p> <ul> <li> <p>S\u00e9lectionner une ligne pour un\u00b7e certain\u00b7e participant\u00b7e: <code>df &lt;- df[df$participant_code == \"FR036\"]</code></p> </li> <li> <p>S\u00e9lectionner une certaine colonne: <code>df &lt;- df$name_column</code></p> </li> <li> <p>Ne s\u00e9lectionner que les lignes avec une certaine r\u00e9ponse \u00e0 une question: <code>df &lt;- df[df$Q29 == 3, ]</code></p> </li> <li> <p>Faire un tableau crois\u00e9: <code>table(df$variable1, df$variable2)</code></p> </li> <li> <p>Faire un plot entre deux variables:</p> </li> </ul> <pre><code>plot(x, y, type=\"b\", pch=4, col=\"red\", xlab=\"titre axe X\", ylab=\"titre axe Y\", main=\"titre graphique\")\n</code></pre> <p>Pour des param\u00e8tres plus avanc\u00e9s, le package <code>ggplot2</code> peut \u00eatre utilis\u00e9.</p> <ul> <li>Faire une r\u00e9gression lin\u00e9aire (si la variable d\u00e9pendante Y est continue)</li> </ul> <pre><code>modele_lin &lt;- lm(Y ~ X, data = df)\nsummary(modele_lin)\n</code></pre> <ul> <li>Faire une r\u00e9gression de Poisson (si Y discr\u00e8te)</li> </ul> <pre><code>modele_poisson &lt;- glm(Y ~ X, data = df, family = poisson)\nsummary(modele_poisson)\n</code></pre> <ul> <li>Faire une r\u00e9gression logistique multinomiale (si Y nominale)</li> </ul> <pre><code>library(nnet)\nmodele_multi &lt;- multinom(Y ~ X, data = df)\nsummary(modele_multi)\n</code></pre> <ul> <li>Faire une r\u00e9gression logistique ordinale (si Y ordinale)</li> </ul> <pre><code>library(MASS)\ndf$Y &lt;- ordered(df$Y, levels = c(\"faible\", \"moyen\", \"\u00e9lev\u00e9\"))\nmodele_ord &lt;- polr(Y ~ X, data = df, Hess = TRUE)\n\n# Calcul des p-values\ncoefs &lt;- coef(summary(modele_ord))\npval &lt;- pnorm(abs(coefs[, \"t value\"]), lower.tail = FALSE) * 2\ncbind(coefs, \"p value\" = pval)\n</code></pre> <ul> <li>Faire une r\u00e9gression logistique binomiale (si Y bool\u00e9en)</li> </ul> <pre><code>modele_bin &lt;- glm(Y ~ X, data = df, family = binomial)\nsummary(modele_bin)\n</code></pre> <ul> <li> <p>Les variables X et Y peuvent \u00eatre attribu\u00e9es avec <code>X &lt;- df$Q36</code> et <code>Y &lt;- df$Q42</code>.</p> <p>Attention: les types des variables doivent \u00eatre bien g\u00e9r\u00e9s selon le type de r\u00e9gression. Utilisez <code>factor(X)</code> ou <code>as.numeric(X)</code> pour attribuer le bon type aux variables.</p> </li> </ul>"},{"location":"OPAL/","title":"OPAL","text":""},{"location":"OPAL/#introduction","title":"Introduction","text":"<p>Les donn\u00e9es du Panel L\u00e9manique sont stock\u00e9es sur OPAL, une application mise \u00e0 disposition par OBiBa. OPAL sert \u00e0 cr\u00e9er des r\u00e9f\u00e9rentiels de donn\u00e9es centraux pour les \u00e9tudes, qui int\u00e8grent sous une interface uniforme les donn\u00e9es collect\u00e9es \u00e0 partir de multiples sources. Ainsi, gr\u00e2ce \u00e0 OPAL, les \u00e9tudes peuvent importer, valider, d\u00e9river, interroger, rapporter, analyser et exporter des donn\u00e9es. (Plus sur OBiBA).</p> <p>Afin d'acc\u00e9der aux donn\u00e9es sur OPAL depuis une interface R, il est n\u00e9cessaire d'installer le package <code>opalr</code>:</p> <pre><code># install from CRAN\ninstall.packages(\"opalr\")\n\n# or install latest development version\nremotes::install_github(\"obiba/opalr\")\n\nlibrary(opalr)\n</code></pre> <p>Pour plus d'informations, la documentation OPAL est la documentation R sont \u00e0 disposition.</p>"},{"location":"OPAL/#login","title":"Login","text":"<p>Une fois votre mot de passe re\u00e7u, la premi\u00e8re connexion doit se faire sur l'interface graphique d'OPAL sous cette adresse. Afin de pouvoir y acc\u00e9der en R, il vous faudra g\u00e9n\u00e9rer un Personal Access Token (voir documentation OPAL). Vous pouvez en cr\u00e9er un en allant dans My Profile en haut \u00e0 gauche dans OPAL. N'oubliez pas de le sauvegarder quelque part, vous ne le verrez qu'une seule fois!</p> <p>Une fois le Personal Access Token cr\u00e9\u00e9, vous pouvez ouvrir une nouvelle session dans RStudio, intaller le package <code>opalr</code> et vous connecter avec:</p> <pre><code>o &lt;- opal.login(token=\"votre_personal_access_token\", url = \"https://panel-lemanique-data.epfl.ch/\")\n</code></pre> <p>Une bonne pratique est \u00e9galement de changer votre mot de passe pour vous cr\u00e9er le votre. Vous pouvez le faire dans My Profile, avec le bouton Update password.</p> <p>Une fois que vous avez fini de travailler dans OPAL, n'oubliez pas de vous d\u00e9connecter avec:</p> <pre><code>opal.logout(o)\n</code></pre>"},{"location":"OPAL/#acces-aux-donnees","title":"Acc\u00e8s aux donn\u00e9es","text":""},{"location":"OPAL/#valeurs","title":"Valeurs","text":"<p>Les donn\u00e9es OPAL sont stock\u00e9es sous forme de tables/vues. Celles-ci sont organis\u00e9es en projets. Les donn\u00e9es du Panel L\u00e9manique sont dans le projet Panel_Lemanique. Pour lister les projets: <code>opal.projects(o)</code>. Plus sur la gestion de projets sous Projets OPAL.</p> <p>Les donn\u00e9es du Panel L\u00e9manique sont organis\u00e9es par vagues, chaque vague \u00e9tant stock\u00e9es dans une table. La commande pour lister les tables disponibles dans un projet est <code>opal.tables(o, \"project\")</code>. Une table peut-\u00eatre cr\u00e9e avec <code>opal.table_create()</code> et supprim\u00e9e avec <code>opal.table_delete()</code>. Plus sur les tables sous Tables OPAL.</p> <p>Il existe deux mani\u00e8res de retirer les donn\u00e9es d'une vague. Le tableau avec l'ensemble des donn\u00e9es d'une vague peut \u00eatre obtenu avec <code>opal.table_get(o, \"project\", \"table\")</code>. Pour retirer uniquement les valeurs pour une personne, la commande <code>opal.valueset(o, \"project\", \"table\", identifier = \"CH007\")</code> peut \u00eatre utilis\u00e9e. Pour obtenir les r\u00e9ponses \u00e0 une seule question, les donn\u00e9es doivent d'abord \u00eatre retir\u00e9es avec <code>df &lt;- opal.table_get()</code> puis les valeurs sont obtenus avec <code>df$Q42</code>.</p>"},{"location":"OPAL/#tables-et-vues","title":"Tables et Vues","text":"<p>OPAL fait une distinction entre les tables et les vues. Les tables sont des tableaux statiques et contiennent les donn\u00e9es brutes du projet. Elles sont cr\u00e9es en t\u00e9l\u00e9chargeant des fichiers externes sur OPAL et en les transformant en tables. Plus sur les fichiers sous Files OPAL.</p> <p>Les vues sont des tableaux dynamiques. Elles sont cr\u00e9es \u00e0 partir de tables et permettent des modifications \u00e0 l'aide de la commande <code>opal.execute(o, \"script\")</code>, avec un script en R. Il est \u00e9galement possible de t\u00e9l\u00e9charger ce script sur OPAL et de l'ex\u00e9cuter ensuite avec <code>opal.execute.source(o, \"path/to/script\")</code>. Plus d'informations sous OPAL R Session.</p>"},{"location":"OPAL/#dictionnaires","title":"Dictionnaires","text":"<p>L'un des principaux avantages d'OPAL est que les dictionnaires des variables peuvent \u00eatre retir\u00e9s tr\u00e8s facilement. La commande pour cela est <code>dico &lt;- opal.table_dictionary_get(o, \"project\", \"table\")</code>. On obtient ainsi deux choses: tout d'abord, <code>dico$variable</code>, listant les variables (donc les en-t\u00eate des colonnes), et <code>dico$categories</code>, qui donne les diff\u00e9rents labels pour une variable (e.g. 1: Homme, 2: Femme, 3: Non-binaire, 4: Ne souhaite pas r\u00e9pondre).</p> <p>Les dictionnaires peuvent ensuite \u00eatre t\u00e9l\u00e9charg\u00e9s en format CSV. Malheureusement, les tableaux <code>variables</code> et <code>categories</code> doivent \u00eatre t\u00e9l\u00e9charg\u00e9s s\u00e9par\u00e9ment, donnant donc deux fichiers CSV. La commande pour cela est <code>write.csv(dico$variable, \"path/to/file\")</code> (de m\u00eame mais avec <code>dico$categories</code> pour le tableau <code>categories</code>). Il est \u00e9galement possible de t\u00e9l\u00e9charger un fichier XLSX avec deux feuilles, une pour les variables et une pour les cat\u00e9gories. Pour cela, le package <code>openxlsx</code> est votre ami. Plus sur les dictionnaires OPAL sous Dictionnaires OPAL.</p>"},{"location":"contact/","title":"Contact","text":""},{"location":"contact/#chef-de-projet","title":"Chef de projet","text":"<p>Guillaume Drevon</p> <p></p> <ul> <li>\ud83d\udce7 guillaume.drevon@epfl.ch </li> <li>\ud83c\udf10 Plus d'informations</li> </ul>"},{"location":"contact/#traitement-des-donnees","title":"Traitement des donn\u00e9es","text":"<p>Alexander Lepper</p> <p></p> <ul> <li>\ud83d\udce7 alexander.lepper@epfl.ch </li> <li>\ud83c\udf10 Plus d'informations </li> </ul>"},{"location":"fonction-helpers/","title":"Package panlemhelpers","text":""},{"location":"fonction-helpers/#installation","title":"Installation","text":"<p>Afin de permettre une meilleure visualisation des donn\u00e9es de chaque vague, un package nomm\u00e9 <code>panlemhelpers</code> a \u00e9t\u00e9 cr\u00e9\u00e9. Ce package contient des fonctions helpers permettant de s\u00e9parer et trier les informations contenues dans les donn\u00e9es brutes. Il peut \u00eatre t\u00e9l\u00e9charg\u00e9 depuis GitHub en utilisant le package <code>remotes</code>:</p> <pre><code>install.packages(\"remotes\")\nremotes::install_github(\"EPFL-LASUR/panlemhelpers\")\n</code></pre> <p>Pour chaque vague du Panel L\u00e9manique, six fonctions ont \u00e9t\u00e9 cr\u00e9\u00e9es. Elles sont fondamentalement similaires \u00e0 travers les vagues, n\u00e9anmoins, d\u00fb \u00e0 la structure des donn\u00e9es brutes, il \u00e9tait compliqu\u00e9 d'impl\u00e9menter une seule fonction permettant d'obtenir le m\u00eame r\u00e9sultat pour toutes les vagues (pour les informaticien\u00b7nes: oui, oui, je sais, c'est absolument ignoble... but time and money baby). Afin de distinguer ces fonctions similaires, un suffixe a \u00e9t\u00e9 rajout\u00e9 dans leur nom afin d'indiquer sur quelle vague elles peuvent \u00eatre utilis\u00e9es (e.g. <code>get_participants_wave1()</code> pour obtenir les informations sur les participant\u00b7es dans la vague 1).</p> <p>On distingue six diff\u00e9rentes fonctions helpers qui sont pr\u00e9sent\u00e9es ci-dessous.</p>"},{"location":"fonction-helpers/#get_participants","title":"<code>get_participants</code>","text":"<p>Cette fonction permet d'obtenir les informations sur les participant\u00b7es des diff\u00e9rentes vagues. On obtient ainsi l'ID, le pays de r\u00e9sidence selon l'\u00e9chantillon d'origine, le pays de r\u00e9sidence lors de la vague actuelle, le genre, la date de naissance, le lieu de r\u00e9sidence, etc... pour chaque participant\u00b7e.</p> <p>La fonction rend deux tableaux. Le premier, nomm\u00e9 <code>participants</code>, contient les informations cit\u00e9es ci-dessus, tandis que le deuxi\u00e8me, nomm\u00e9 <code>labels</code>, est un dictionnaire des variables list\u00e9es dans le premier. Voici comment y acc\u00e9der en prenant exemple sur la premi\u00e8re vague du panel:</p> <pre><code>wave1_data &lt;- opal.table_get(o, \"Panel L\u00e9manique\", \"wave1\")\nfichier &lt;- get_participants_wave1(wave1_data)\nfichier$participants\nfichier$labels\n</code></pre>"},{"location":"fonction-helpers/#get_questions","title":"<code>get_questions</code>","text":"<p>Cette fonction permet de lister les questions de chaque vague, en indiquant le nom de la variable (e.g. Q42), le texte de la question (e.g. \"Poss\u00e9dez-vous le permis de conduire?\") ainsi que la section du questionnaire \u00e0 laquelle la question appartient (e.g. Portfolio personnel). En addition, afin de faciliter le suivi entre les vagues, le tableau pour la vague 3 poss\u00e8de une colonne nomm\u00e9e <code>lien_W1</code>, indiquant si la question reprend une question de la premi\u00e8re vague.</p> <p>Comme pour la fonction <code>get_participants</code>, la fonction renvoie deux tableaux, le premier contenant les informations nomm\u00e9es ci-dessus, le deuxi\u00e8me le dictionnaire des variables. Ils sont accessibles avec <code>fichier$questions</code> et <code>fichier$labels</code>.</p>"},{"location":"fonction-helpers/#get_section","title":"<code>get_section</code>","text":"<p>Cette fonction renvoie un tableau listant les sections du questionnaire de la vague concern\u00e9e.</p>"},{"location":"fonction-helpers/#get_documentation","title":"<code>get_documentation</code>","text":"<p>Cette fonction est tr\u00e8s similaire \u00e0 la fonction <code>opal.table_dictionary_get()</code>. Elle permet d'obtenir un dictionnaire de toutes les variables de la vague concern\u00e9e.</p>"},{"location":"fonction-helpers/#get_survey_completion","title":"<code>get_survey_completion</code>","text":"<p>\u00c0 l'aide de cette fonction, il est possible de filter les m\u00e9tadonn\u00e9es des vagues. Elle fournit ainsi des informations sur l'heure \u00e0 laquelle le questionnaire a \u00e9t\u00e9 commenc\u00e9, l'heure \u00e0 laquelle il a \u00e9t\u00e9 termin\u00e9, et le temps qui fut n\u00e9cessaire \u00e0 sa compl\u00e9tion. Selon les vagues, elle permet \u00e9galement de conna\u00eetre le syst\u00e8me d'exploitation des participant\u00b7es (Windows, MacOS, Android, iOS, Linux,...) et le browser qui fut utilis\u00e9 (Edge, Safari, Chrome,...). Enfin, et tr\u00e8s int\u00e9ressant, elle permet d'acc\u00e9der \u00e0 la variable <code>count_miss</code>, qui indique le nombre de questions qui n'ont pas \u00e9t\u00e9 r\u00e9pondue.</p> <p>Selon les vagues, la fonction livre \u00e9galement un dictionnaire des variables, accessible sous <code>fichier$labels</code>.</p>"},{"location":"fonction-helpers/#get_answers","title":"<code>get_answers</code>","text":"<p>Cette derni\u00e8re fonction permet d'obtenir les r\u00e9ponses des participant\u00b7es aux questions. Sur chaque ligne est donn\u00e9 la r\u00e9ponse \u00e0 une question par un\u00b7e particpant\u00b7e. Il s'agit donc d'un tableau avec un nombre de ligne important, pouvant d\u00e9passer la limite de lignes pour Microsoft Excel ou LibreOffice Calc.</p>"}]}